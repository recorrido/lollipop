# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/flog/all/flog.rbi
#
# flog-4.6.4

class File < IO
end
class Flog < MethodBasedSexpProcessor
  def add_to_score(name, score = nil); end
  def average; end
  def calculate; end
  def calculate_total_scores; end
  def calls; end
  def dsl_name?(args); end
  def each_by_score(max = nil); end
  def flog(*files); end
  def flog_ruby!(ruby, file = nil, timeout = nil); end
  def flog_ruby(ruby, file = nil, timeout = nil); end
  def initialize(option = nil); end
  def mass; end
  def max_method; end
  def max_score; end
  def method_scores; end
  def multiplier; end
  def multiplier=(arg0); end
  def no_method; end
  def option; end
  def penalize_by(bonus); end
  def process_alias(exp); end
  def process_and(exp); end
  def process_attrasgn(exp); end
  def process_block(exp); end
  def process_block_pass(exp); end
  def process_call(exp); end
  def process_case(exp); end
  def process_class(exp); end
  def process_dasgn_curr(exp); end
  def process_else(exp); end
  def process_iasgn(exp); end
  def process_if(exp); end
  def process_iter(exp); end
  def process_lasgn(exp); end
  def process_lit(exp); end
  def process_masgn(exp); end
  def process_or(exp); end
  def process_rescue(exp); end
  def process_safe_call(exp); end
  def process_sclass(exp); end
  def process_super(exp); end
  def process_until(exp); end
  def process_when(exp); end
  def process_while(exp); end
  def process_yield(exp); end
  def reset; end
  def score_method(tally); end
  def scores; end
  def threshold; end
  def threshold=(arg0); end
  def total_score; end
  def totals; end
end
