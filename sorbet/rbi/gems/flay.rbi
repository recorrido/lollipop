# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/flay/all/flay.rbi
#
# flay-2.12.1

class File < IO
end
class Flay
  def analyze(filter = nil); end
  def collapse_and_label(ary); end
  def filter_sexp(exp); end
  def hashes; end
  def identical; end
  def identical=(arg0); end
  def initialize(option = nil); end
  def mass_threshold; end
  def mass_threshold=(arg0); end
  def masses; end
  def masses=(arg0); end
  def n_way_diff(*data); end
  def option; end
  def pad_with_empty_strings(ary); end
  def process(*files); end
  def process_fuzzy(node, difference); end
  def process_rb(file); end
  def process_sexp(pt); end
  def prune; end
  def prune_conservatively; end
  def prune_liberally; end
  def report(io = nil); end
  def self.default_options; end
  def self.load_plugins; end
  def self.parse_options(args = nil); end
  def self.run(args = nil); end
  def sexp_to_rb(sexp); end
  def split_and_group(ary); end
  def summary; end
  def total; end
  def total=(arg0); end
  def update_masses; end
end
class Anonymous_Struct_2 < Struct
  def bonus; end
  def bonus=(_); end
  def locations; end
  def locations=(_); end
  def mass; end
  def mass=(_); end
  def name; end
  def name=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def structural_hash; end
  def structural_hash=(_); end
end
class Flay::Item < Anonymous_Struct_2
  def identical?; end
end
class Anonymous_Struct_3 < Struct
  def file; end
  def file=(_); end
  def fuzzy; end
  def fuzzy=(_); end
  def line; end
  def line=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class Flay::Location < Anonymous_Struct_3
  def fuzzy?; end
end
class String
  def group; end
  def group=(arg0); end
end
class Sexp < Array
  def +(o); end
  def [](a); end
  def all_structural_subhashes; end
  def code_index; end
  def has_code?; end
  def initialize_copy(o); end
  def modified; end
  def modified=(arg0); end
  def modified?; end
  def pure_ruby_hash; end
  def split_at(n); end
  def split_code; end
  def structural_hash; end
end
class Array
  def delete_eql(other); end
end
